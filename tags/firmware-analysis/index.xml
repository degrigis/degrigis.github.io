<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>firmware analysis on POP RAX; POP RBX; RET</title>
    <link>http://www.example.com/tags/firmware-analysis/</link>
    <description>Recent content in firmware analysis on POP RAX; POP RBX; RET</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 06 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://www.example.com/tags/firmware-analysis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Firmware analysis with angr</title>
      <link>http://www.example.com/posts/angr_firmware/</link>
      <pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.example.com/posts/angr_firmware/</guid>
      <description>Firmware &amp;amp; angr A Custom Loader Security Thoughts  In the past few months, as part of my current research project, I have been playing a lot with angr and firmware analysis.
In particular, I&amp;rsquo;ve been playing with monolithic firmware images. More specifically, single fat binaries that blend together application and system code (usually a real time operating system + libraries) and are generally flushed and executed in a custom way on physical dedicated devices.</description>
    </item>
    
  </channel>
</rss>
